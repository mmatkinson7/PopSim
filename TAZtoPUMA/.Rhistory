library(tidycensus)
library(tidyverse)
library(sf)
library(mapview)
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
install.packages("tidycensus","tidyverse", "sf", "mapview", "tmap", "ggplot2", "dplyr")
install.packages("tidyverse")
install.packages("tidycensus")
install.packages("sf")
install.packages("dplyr")
install.packages("mapview")
library(dplyr)
library(tidycensus)
library(tidyverse)
library(sf)
library(mapview)
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
mapview(census_essex_co)
View(census_essex_co)
View(census_essex_co)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("CENSUS_API_KEY")
library(tidycensus)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("CENSUS_API_KEY")
library(tidyverse)
library(sf)
library(mapview)
View(pums_variables)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOC","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("OCCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2019,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2014,
survey = "acs5"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2014,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2017,
survey = "acs5"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2015,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2016,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2016,
survey = "acs1"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs1"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC","PUMA"),
state = "MA",
year = 2010,
survey = "acs1"
)
View(lemur)
write.csv("C:\Users\matkinson.AD\Downloads\pums2010MA_inc_occ.csv")
write.csv("C:\\Users\matkinson.AD\Downloads\pums2010MA_inc_occ.csv")
write.csv("C:\\Users\\matkinson.AD\\Downloads\\pums2010MA_inc_occ.csv")
write.csv("C://Users/matkinson.AD//Downloads/pums2010MA_inc_occ.csv")
write.csv("C://Users//matkinson.AD//Downloads//pums2010MA_inc_occ.csv")
write.csv("C:/Users//matkinson.AD//Downloads//pums2010MA_inc_occ.csv")
write.csv("C:/Users/matkinson.AD/Downloads/pums2010MA_inc_occ.csv")
write.csv(lemur,"C:/Users/matkinson.AD/Downloads/pums2010MA_inc_occ.csv")
setwd("J:\\Shared drives\\TMD_TSA\\Model\\software\\PopSim\\TAZtoPUMA")
library(tidycensus)
library(tidyverse)
# look at all variables needed
pums_vars <- pums_variables %>%
filter(year == 2019, survey == "acs5")
#download just the variables you need for MA, RI, and NH
pums <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","WGTP","PWGTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = c("MA","RI","NH"),
survey = "acs5",
year = 2019
)
#get just housing units, exclude group quarters
pums <- pums %>% filter(TYPE == 1)
# make column called EMP that is binary on whether person is employed or not
pums <- pums %>% mutate(EMP = if_else(ESR<3,1,0))
# #get workers per HH
pums <- pums %>%
group_by(SERIALNO) %>%
mutate(HHEMP = sum(EMP)) %>%
ungroup()
#still need to deal with the adjustment factor for $
# adjusting to 2015
pums <- pums %>% mutate(HINCPADJ = HINCP * as.numeric(ADJINC))
# HH categories for people per HH
pums <- pums %>% mutate(HHNP = if_else(NP<3,NP,4))
# HH categories for workers per HH
pums <- pums %>% mutate(HHEMPCAT = if_else(HHEMP<4,HHEMP,4))
hh <- pums %>% distinct(SERIALNO,TYPE, WGTP, NP, PUMA, ST, HHNP, HHEMP,HHEMPCAT,HINCPADJ)
p <- pums %>% select(SERIALNO, PWGTP, SPORDER, ESR, EMP, PUMA, ST)
View(p)
p$PUMA2 <- p$ST + p$PUMA
p$PUMA2 <- paste0(p$ST,p$PUMA)
p$PUMA <- paste0(p$ST,p$PUMA)
hh$PUMA <- paste0(hh$ST,hh$PUMA)
View(p)
p <- pums %>% select(SERIALNO, PWGTP, SPORDER, ESR, EMP, PUMA, ST)
p$PUMA <- paste0(p$ST,p$PUMA)
View(p)
View(hh)
View(pums)
write.csv(hh, "hh_pums_2019_5YR.csv")
write.csv(p, "person_pums_2019_5YR.csv")
# look at all variables needed
pums_vars <- pums_variables %>%
filter(year == 2019, survey == "acs5")
#download just the variables you need for MA, RI, and NH
pums <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","WGTP","PWGTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = c("MA","RI","NH"),
survey = "acs5",
year = 2019
)
#get just housing units, exclude group quarters
pums <- pums %>% filter(TYPE == 1)
# make column called EMP that is binary on whether person is employed or not
pums <- pums %>% mutate(EMP = if_else(ESR<3,1,0))
# #get workers per HH
pums <- pums %>%
group_by(SERIALNO) %>%
mutate(HHEMP = sum(EMP)) %>%
ungroup()
#still need to deal with the adjustment factor for $
# adjusting to 2015
pums <- pums %>% mutate(HHINCPADJ = HINCP * as.numeric(ADJINC))
# HH categories for people per HH
pums <- pums %>% mutate(HHNP = if_else(NP<3,NP,4))
# HH categories for workers per HH
pums <- pums %>% mutate(HHEMPCAT = if_else(HHEMP<4,HHEMP,4))
hh <- pums %>% distinct(SERIALNO,TYPE, WGTP, NP, PUMA, ST, HHNP, HHEMP,HHEMPCAT,HHINCPADJ)
p <- pums %>% select(SERIALNO, PWGTP, SPORDER, ESR, EMP, PUMA, ST)
p$PUMA <- paste0(p$ST,p$PUMA)
hh$PUMA <- paste0(hh$ST,hh$PUMA)
write.csv(hh, "hh_pums_2019_5YR.csv")
write.csv(p, "person_pums_2019_5YR.csv")
