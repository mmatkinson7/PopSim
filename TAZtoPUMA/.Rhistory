install.packages("RPostgres")
install.packages("readxl")
install.packages("dplyr")
install.packages("sqldf")
install.packages("stringr")
install.packages("hash")
library(RPostgres)
library(readxl)
library(dplyr)
library(sqldf)
library(stringr)
library(hash)
updateR()
installr
install.packages("installr")
library(installr)
updateR()
directories <- hash(c("working_dir", "tracts_bgs_subfolder_name"),
c("M/CensusTest", "TBG"))
# FTP download URLs
#
urls <- hash(c("non_tracts_bgs_download_url", "tracts_bgs_download_url", "templates_url"),
c("https://www2.census.gov/programs-surveys/acs/summary_file/2018/data/5_year_by_state/Massachusetts_All_Geographies_Not_Tracts_Block_Groups.zip",
"https://www2.census.gov/programs-surveys/acs/summary_file/2018/data/5_year_by_state/Massachusetts_Tracts_Block_Groups_Only.zip",
"https://www2.census.gov/programs-surveys/acs/summary_file/2018/data/2018_5yr_Summary_FileTemplates.zip"))
# Zip file names
#
zip_filenames <- hash(c("non_tracts_bgs_zip_filename", "tracts_bgs_zip_filename", "templates_zip_filename"),
c("MA_2018_ACS_5YR_AG.zip", "MA_2018_ACS_5YR_TBG.zip", "MA_2018_ACS_5YR_Templates.zip"))
# PostgreSQL database connection parameters and user names
#
postgres_info <- hash(c("atabase_name", "database_host", "database_port", "database_username",
"database_password", "database_all_user", "database_select_user"),
c("MY_DATABASE_NAME", "foo.bar.org", "5432", "MY_DATABASE_USERNAME",
"MY_DATABASE_PASSWORD", "MY_ALL_PRIVS_USERNAME", "MY_SELECT_ONLY_USERNAME"))
# Data dictionary file name
#
dataDictfile <- "M:/CensusDownloading/ACS_5yr_Seq_Table_Number_Lookup.xlsx"
# Download the zip file via ftp for non-tract and blockgroup geometries
download.file(urls$non_tracts_bgs_download_url, zip_filenames$non_tracts_bgs_zip_filename) #don't need to loop should be 1 file
setwd(directories['working_dir'])
directories['working_dir']
directories$working_dir
setwd(directories$working_dir)
library(tidycensus)
library(tidyverse)
library(stringr)
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("CENSUS_API_KEY")
#2010 Census Pop
TotalPop <- c("P001001")
#2014 ACS Pop
ACSPop <- c("B01003")
#grab the tables
B01003 <- get_acs(geography = 'block', table = "B01003", year = 2019, state = "MA")
#grab the tables
B01003 <- get_acs(geography = 'block group', table = "B01003", year = 2014, state = "MA")
P001001_Block <- get_decennial(geography = 'block', variables ="P001001" , year = 2010, sumfile = "sf1", state = "MA")
P001001_BG <- get_decennial(geography = 'block group', variables ="P001001" , year = 2010, sumfile = "sf1", state = "MA")
#grab both block and block group
P001001_Block <- get_decennial(geography = 'blocks', variables ="P001001" , year = 2010, sumfile = "sf1", state = "MA")
View(P001001_BG)
View(B01003)
#grab both block and block group
P001001_Block <- get_decennial(geography = 'block', variables ="P001001" , year = 2010, sumfile = "sf1", state = "MA")
#grab both block and block group
P001001_Block <- get_decennial(geography = 'block', variables ="P001001" , year = 2010, sumfile = "sf1", state = "MA")
library( rhdf5 )
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
library( rhdf5 )
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
install.packages("boot", "class","cluster","codetools","foreign" "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial")
install.packages("boot", "class","cluster","codetools","foreign", "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial")
install.packages("Rtools")
installr::install.Rtools
installr::install.Rtools()
install.packages("boot", "class","cluster","codetools","foreign", "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial")
source("https://bioconductor.org/biocLite.R")
library(BiocInstaller)
biocLite("rhdf5")
library( rhdf5 )
BiocManager::install("rhdf5")
#Data Preparation for Reweighter
install.packages(c("survey", "srvyr",'tidycensus', 'dplyr','tidyverse'))
library(c(survey, srvyr, tidycensus, dplyr, tidyverse))
library(survey, srvyr, tidycensus, dplyr, tidyverse)
library(survey)
library(srvyr)
library(tidycensus)
library(dplyr)
library(tidyverse)
library(survey)
library(srvyr)
library(tidycensus)
library(dplyr)
library(tidyverse)
#Grab PUMS data (age, education level, and household size) for PUMAs in Massachusetts
ma_pums <- get_pums(
variables = c("PUMA", "AGEP", "SCHL", "NP", "SEX"),
state = "MA",
survey = "acs5",
year = 2019,
recode = TRUE
)
ma_pums['AgeCat']<-case_when(
ma_pums$AGEP >= 0 & ma_pums$AGEP <= 4  ~ 1,
ma_pums$AGEP >= 5 & ma_pums$AGEP <= 9  ~ 2,
ma_pums$AGEP >= 10 & ma_pums$AGEP <= 14  ~ 3,
ma_pums$AGEP >= 15 & ma_pums$AGEP <= 19  ~ 4,
ma_pums$AGEP >= 20 & ma_pums$AGEP <= 24  ~ 5,
ma_pums$AGEP >= 25 & ma_pums$AGEP <= 29  ~ 6,
ma_pums$AGEP >= 30 & ma_pums$AGEP <= 34  ~ 7,
ma_pums$AGEP >= 35 & ma_pums$AGEP <= 39  ~ 8,
ma_pums$AGEP >= 40 & ma_pums$AGEP <= 44  ~ 9,
ma_pums$AGEP >= 45 & ma_pums$AGEP <= 49  ~ 10,
ma_pums$AGEP >= 50 & ma_pums$AGEP <= 54  ~ 11,
ma_pums$AGEP >= 55 & ma_pums$AGEP <= 59  ~ 12,
ma_pums$AGEP >= 60 & ma_pums$AGEP <= 64  ~ 13,
ma_pums$AGEP >= 65 & ma_pums$AGEP <= 69  ~ 14,
ma_pums$AGEP >= 70 & ma_pums$AGEP <= 74  ~ 15,
ma_pums$AGEP >= 75 & ma_pums$AGEP <= 79  ~ 16,
ma_pums$AGEP >= 80 & ma_pums$AGEP <= 84  ~ 17,
ma_pums$AGEP >= 85 ~ 18)
setwd("M:/TAZtoPUMA")
library(tidycensus)
library(tidyverse)
pums_vars <- pums_variables %>%
filter(year == 2019, survey == "acs5")
View(pums_vars)
ma_pums <- get_pums(
variablese = c("PUMA","RT","SERIALNO","TYPE","ST","WGTP","PGWTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = "MA",
survey = "acs5",
year = 2019
)
View(pums_vars)
ma_pums <- get_pums(
variablese = c("WGTP","PGWTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = "MA",
survey = "acs5",
year = 2019
)
ma_pums <- get_pums(
variables = c("PUMA","RT","SERIALNO","TYPE","ST","WGTP","PGWTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = "MA",
survey = "acs5",
year = 2019
)
ma_pums <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","WGTP","PGWTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = "MA",
survey = "acs5",
year = 2019
)
ma_pums <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","WGTP","PWGTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = "MA",
survey = "acs5",
year = 2019
)
View(ma_pums)
pums <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","WGTP","PWGTP","NP","HINCP","ADJINC","SPORDER","ESR"),
state = c("MA","RI","NH"),
survey = "acs5",
year = 2019
)
View(ma_pums)
pums <- pums %>% mutate(EMP = if_else(ESR<3,1,0))
View(pums)
#get just housing units, exclude group quarters
pums <- pums %>% filter(TYPE == 1)
View(pums)
hh <- pums %>% select(SERIALNO, TYPE, WGTP, NP, HINCP, ADJINC) %>% group_by(SERIALNO)
View(hh)
hh <- pums %>% select(SERIALNO, TYPE, WGTP, NP, HINCP, ADJINC) %>% distinct(SERIALNO)
View(hh)
hh <- pums %>% distinct(SERIALNO,TYPE, WGTP, NP, HINCP, ADJINC)
View(hh)
p <- pums %>% select(SERIALNO, PWGTP, SPORDER, ESR, EMP)
View(p)
hh <- pums %>% distinct(SERIALNO,TYPE, WGTP, NP, HINCP, ADJINC, PUMA, ST)
p <- pums %>% select(SERIALNO, PWGTP, SPORDER, ESR, EMP, PUMA, ST)
View(p)
write.csv(pums_2019_5YR_MARINH.csv)
write.csv(hh, "hh_pums_2019_5YR.csv")
write.csv(p, "person_pums_2019_5YR.csv")
write.csv(pums, "pums_2019_5YR_MARINH.csv")
