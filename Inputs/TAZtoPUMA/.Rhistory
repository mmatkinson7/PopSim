library(tidycensus)
library(tidyverse)
library(sf)
library(mapview)
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
install.packages("tidycensus","tidyverse", "sf", "mapview", "tmap", "ggplot2", "dplyr")
install.packages("tidyverse")
install.packages("tidycensus")
install.packages("sf")
install.packages("dplyr")
install.packages("mapview")
library(dplyr)
library(tidycensus)
library(tidyverse)
library(sf)
library(mapview)
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
census_essex_co <- get_decennial(geography = "block group",  
state = "MA",
county = "Essex",
variables = "P2_005N",
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
cb = FALSE) %>%
mutate(value_min = summary_value - value,
pct_min = value_min / summary_value) %>%
tigris::erase_water(area_threshold = 0.95, year = 2020)
mapview(census_essex_co)
View(census_essex_co)
View(census_essex_co)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("CENSUS_API_KEY")
library(tidycensus)
#Census API key set up
census_api_key("e4bec76221ba04c7df76c7c580659bf1f54ed2c1", install = TRUE)
# First time, reload your environment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("CENSUS_API_KEY")
library(tidyverse)
library(sf)
library(mapview)
View(pums_variables)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOC","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("OCCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2019,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","WAGP","ADJINC"),
state = "MA",
year = 2014,
survey = "acs5"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2014,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2017,
survey = "acs5"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2015,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2016,
survey = "acs5"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2016,
survey = "acs1"
)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC"),
state = "MA",
year = 2010,
survey = "acs1"
)
View(lemur)
lemur <- get_pums(variables = c("SOCP","OCCP","WAGP","ADJINC","PUMA"),
state = "MA",
year = 2010,
survey = "acs1"
)
View(lemur)
write.csv("C:\Users\matkinson.AD\Downloads\pums2010MA_inc_occ.csv")
write.csv("C:\\Users\matkinson.AD\Downloads\pums2010MA_inc_occ.csv")
write.csv("C:\\Users\\matkinson.AD\\Downloads\\pums2010MA_inc_occ.csv")
write.csv("C://Users/matkinson.AD//Downloads/pums2010MA_inc_occ.csv")
write.csv("C://Users//matkinson.AD//Downloads//pums2010MA_inc_occ.csv")
write.csv("C:/Users//matkinson.AD//Downloads//pums2010MA_inc_occ.csv")
write.csv("C:/Users/matkinson.AD/Downloads/pums2010MA_inc_occ.csv")
write.csv(lemur,"C:/Users/matkinson.AD/Downloads/pums2010MA_inc_occ.csv")
setwd("J:\\My Drive\\TDM\\VA_ACS_Summary")
library(tidycensus)
library(tidyverse)
# look at all variables needed
pums_vars <- pums_variables %>%
filter(year == 2019, survey == "acs5")
#download just the variables you need for MA, RI, and NH
pums19 <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","SPORDER","WGTP","PWGTP","NP","HINCP","ADJINC","VEH","ESR","AGEP"),
state = c("MA"),
survey = "acs5",
year = 2019
)
pums10 <- get_pums(
variables = c("PUMA","SERIALNO","TYPE","ST","SPORDER","WGTP","PWGTP","NP","HINCP","ADJINC","VEH","ESR","AGEP"),
state = c("MA"),
survey = "acs5",
year = 2010
)
#get just housing units, exclude group quarters
pums19 <- pums19 %>% filter(TYPE == 1)
pums10 <- pums10 %>% filter(TYPE == 1)
#make drivers column
pums10$DRIVERS <- NA
pums19$DRIVERS <- NA
#categorize by age
pums19$DRIVERS[pums19$AGEP > 15] <- 1
pums19$DRIVERS[pums19$AGEP < 16] <- 0
pums10$DRIVERS[pums10$AGEP > 15] <- 1
pums10$DRIVERS[pums10$AGEP < 16] <- 0
pums19=rename(pums19,"hhsize" = NP)
pums10=rename(pums10,"hhsize" = NP)
#categorize by income
pums19$HHINCADJ <- as.numeric(pums19$HINCP)*as.numeric(pums19$ADJINC)
pums10$HHINCADJ <- as.numeric(pums10$HINCP)*as.numeric(pums10$ADJINC)
# income categories type 1
pums19 <- pums19 %>% mutate(inc_3level = case_when(HHINCADJ < 35000 ~ "1: < $35K",
HHINCADJ >= 35000 & HHINCADJ < 75000 ~ "2: $35 - $75K",
HHINCADJ >= 75000 ~ "3: > $75K"))
pums10 <- pums10 %>% mutate(inc_3level = case_when(HHINCADJ < 35000 ~ "1: < $35K",
HHINCADJ >= 35000 & HHINCADJ < 75000 ~ "2: $35 - $75K",
HHINCADJ >= 75000 ~ "3: > $75K"))
# income categories type 2
pums10 <- pums10 %>% mutate(inc_size_wgt = case_when((HHINCADJ < 26929 & hhsize == 1) |
(HHINCADJ < 35678 & hhsize == 2) |
(HHINCADJ < 41704 & hhsize == 3) |
(HHINCADJ < 54263 & hhsize == 4) |
(HHINCADJ < 65322 & hhsize == 5) |
(HHINCADJ < 74349 & hhsize == 6) |
(HHINCADJ < 85741 & hhsize == 7) |
(HHINCADJ < 96141 & hhsize > 7)
~ "1: low income",
HHINCADJ > 100000 ~ "3: high income",
TRUE ~ "2: middle income"
))
# adjust for inflation
pums19 <- pums19 %>% mutate(inc_size_wgt = case_when((HHINCADJ < (26929*1.1724) & hhsize == 1) |
(HHINCADJ < (35678*1.1724) & hhsize == 2) |
(HHINCADJ < (41704*1.1724) & hhsize == 3) |
(HHINCADJ < (54263*1.1724) & hhsize == 4) |
(HHINCADJ < (65322*1.1724) & hhsize == 5) |
(HHINCADJ < (74349*1.1724) & hhsize == 6) |
(HHINCADJ < (85741*1.1724) & hhsize == 7) |
(HHINCADJ < (96141*1.1724) & hhsize > 7)
~ "1: low income",
HHINCADJ > (100000*1.1724) ~ "3: high income",
TRUE ~ "2: middle income"))
# adjust for inflation
pums19 <- pums19 %>% mutate(inc_size_wgt = case_when((HHINCADJ < (26929*1.1724) & hhsize == 1) |
(HHINCADJ < (35678*1.1724) & hhsize == 2) |
(HHINCADJ < (41704*1.1724) & hhsize == 3) |
(HHINCADJ < (54263*1.1724) & hhsize == 4) |
(HHINCADJ < (65322*1.1724) & hhsize == 5) |
(HHINCADJ < (74349*1.1724) & hhsize == 6) |
(HHINCADJ < (85741*1.1724) & hhsize == 7) |
(HHINCADJ < (96141*1.1724) & hhsize > 7)
~ "1: low income",
HHINCADJ > (100000*1.1724) ~ "3: high income",
TRUE ~ "2: middle income"))
# workers
pums10$Workers <- if_else(pums10$ESR == 1 | pums10$ESR == 2, 1, 0)
pums19$Workers <- if_else(pums19$ESR == 1 | pums19$ESR == 2, 1, 0)
# adjust for inflation
pums19 <- pums19 %>% mutate(inc_size_wgt = case_when(((HHINCADJ/1.1724) < 26929 & hhsize == 1) |
((HHINCADJ/1.1724) < 35678 & hhsize == 2) |
((HHINCADJ/1.1724) < 41704 & hhsize == 3) |
((HHINCADJ/1.1724) < 54263 & hhsize == 4) |
((HHINCADJ/1.1724) < 65322 & hhsize == 5) |
((HHINCADJ/1.1724) < 74349 & hhsize == 6) |
((HHINCADJ/1.1724) < 85741 & hhsize == 7) |
((HHINCADJ/1.1724) < 96141 & hhsize > 7)
~ "1: low income",
HHINCADJ > (100000*1.1724) ~ "3: high income",
TRUE ~ "2: middle income"))
setwd("J:\\Shared drives\\TMD_TSA\\Model\\software\\PopSim\\TAZtoPUMA")
setwd("J:\\Shared drives\\TMD_TSA\\Model\\software\\PopSim\\TAZtoPUMA")
setwd("J:/Shared drives/TMD_TSA/Model/software/PopSim/Inputs/TAZtoPUMA")
library(tidyverse)
tazpuma <- read_csv("TAZPUMA.csv")
View(tazpuma)
tazpuma %>% group_by(taz) %>% filter(AreaMi == max(AreaMi))
View(tazpuma)
tazpuma %>% group_by(id) %>% filter(AreaMi == max(AreaMi))
tp <- tazpuma %>% group_by(id) %>% filter(AreaMi == max(AreaMi))
View(tp)
tp <- tp %>% rename("TAZ" = id, "PUMA" = GEOID)
tp <- tp %>% select(id, GEOID) %>% rename("TAZ" = id, "PUMA" = GEOID)
View(tp)
tp$REGION <- 1
View(tp)
write_csv(geo_cross_walk.csv)
write_csv(tp,"geo_cross_walk.csv")
